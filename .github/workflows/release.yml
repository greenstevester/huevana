name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 4.1.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          IS_PRERELEASE=false
        else
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        fi

        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
        echo "Pre-release: $IS_PRERELEASE"

    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-suffix"
          exit 1
        fi

    - name: Check if tag exists
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if git rev-parse "v$VERSION" >/dev/null 2>&1; then
          echo "Tag v$VERSION already exists"
          exit 1
        fi

    - name: Run tests
      run: mvn $MAVEN_CLI_OPTS clean test

  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - name: Update version in POM
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false

    - name: Build and package
      run: mvn $MAVEN_CLI_OPTS clean package -DskipTests

    - name: Generate sources and javadoc
      run: mvn $MAVEN_CLI_OPTS source:jar javadoc:jar



    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: |
          target/*.jar
          target/*.pom
        retention-days: 90

  deploy-maven:
    name: Deploy to Maven Central
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    environment: maven-central

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - name: Update version in POM
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false

    - name: Verify credentials are set
      run: |
        if [ -z "${{ secrets.OSSRH_USERNAME }}" ]; then
          echo "ERROR: OSSRH_USERNAME secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.OSSRH_TOKEN }}" ]; then
          echo "ERROR: OSSRH_TOKEN secret is not set"
          exit 1
        fi
        echo "âœ“ OSSRH credentials are configured"

    - name: Deploy to Maven Central
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        mvn $MAVEN_CLI_OPTS clean deploy -DskipTests=true \
          -Prelease

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, deploy-maven]

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts
        path: artifacts/
    - name: Generate release notes
      id: release-notes
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"

        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

        echo "# Release Notes for v$VERSION" > release_notes.md
        echo "" >> release_notes.md

        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" >> release_notes.md
          echo "" >> release_notes.md

          # Generate changelog from commits
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> release_notes.md
          echo "" >> release_notes.md
        fi

        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Maven" >> release_notes.md
        echo '```xml' >> release_notes.md
        echo '<dependency>' >> release_notes.md
        echo '    <groupId>io.github.greenstevester</groupId>' >> release_notes.md
        echo '    <artifactId>huevana</artifactId>' >> release_notes.md
        echo "    <version>$VERSION</version>" >> release_notes.md
        echo '</dependency>' >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        echo "### Gradle" >> release_notes.md
        echo '```gradle' >> release_notes.md
        echo "implementation 'io.github.greenstevester:huevana:$VERSION'" >> release_notes.md
        echo '```' >> release_notes.md

    - name: Create or update tag
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "v$VERSION" -m "Release v$VERSION"
        git push origin "v$VERSION"

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: "v${{ needs.validate-release.outputs.version }}"
        name: "Release v${{ needs.validate-release.outputs.version }}"
        bodyFile: release_notes.md
        artifacts: "artifacts/*"
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is-prerelease }}
        generateReleaseNotes: true
        token: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update development version
      if: github.event_name == 'workflow_dispatch' && needs.validate-release.outputs.is-prerelease == 'false'
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"

        # Calculate next development version
        IFS='.' read -ra ADDR <<< "$VERSION"
        MAJOR=${ADDR[0]}
        MINOR=${ADDR[1]}
        PATCH=${ADDR[2]}

        NEXT_MINOR=$((MINOR + 1))
        NEXT_DEV_VERSION="$MAJOR.$NEXT_MINOR.0-SNAPSHOT"

        # Update POM
        mvn versions:set -DnewVersion=$NEXT_DEV_VERSION -DgenerateBackupPoms=false

        # Commit changes
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add pom.xml
        git commit -m "Prepare for next development iteration: $NEXT_DEV_VERSION"
        git push origin main

    - name: Create milestone for next version
      if: needs.validate-release.outputs.is-prerelease == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const version = "${{ needs.validate-release.outputs.version }}";
          const [major, minor, patch] = version.split('.').map(Number);
          const nextVersion = `${major}.${minor + 1}.0`;

          try {
            await github.rest.issues.createMilestone({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `v${nextVersion}`,
              description: `Milestone for version ${nextVersion}`,
            });
            console.log(`Created milestone for v${nextVersion}`);
          } catch (error) {
            console.log(`Milestone v${nextVersion} may already exist`);
          }
